//+------------------------------------------------------------------+
//|               Moving Average Crossover EA (MT5)                 |
//|                     Generated with AI                           |
//+------------------------------------------------------------------+
#property copyright "Generated by AI"
#property version   "1.00"
#property strict

//--- input parameters
input double   Lots            = 0.1;        // Lot size
input int      FastMAPeriod    = 10;         // Fast MA period
input int      SlowMAPeriod    = 30;         // Slow MA period
input ENUM_MA_METHOD MAType    = MODE_SMA;   // MA type (SMA, EMA, etc.)
input ENUM_TIMEFRAMES TimeFrame= PERIOD_M5;  // Timeframe for MAs
input double   StopLoss        = 200;        // Stop loss (points)
input double   TakeProfit      = 400;        // Take profit (points)

//--- handles for moving averages
int fastMAHandle;
int slowMAHandle;

//+------------------------------------------------------------------+
//| Expert initialization                                            |
//+------------------------------------------------------------------+
int OnInit()
  {
   fastMAHandle = iMA(_Symbol, TimeFrame, FastMAPeriod, 0, MAType, PRICE_CLOSE);
   slowMAHandle = iMA(_Symbol, TimeFrame, SlowMAPeriod, 0, MAType, PRICE_CLOSE);

   if(fastMAHandle == INVALID_HANDLE || slowMAHandle == INVALID_HANDLE)
     {
      Print("Failed to create indicator handles!");
      return INIT_FAILED;
     }
   return INIT_SUCCEEDED;
  }
//+------------------------------------------------------------------+
//| Expert deinitialization                                          |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   IndicatorRelease(fastMAHandle);
   IndicatorRelease(slowMAHandle);
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   //--- get indicator values
   double fastMA[], slowMA[];
   if(CopyBuffer(fastMAHandle,0,0,3,fastMA) < 0) return;
   if(CopyBuffer(slowMAHandle,0,0,3,slowMA) < 0) return;

   //--- check for open positions
   if(PositionsTotal() > 0) return;

   //--- check crossover
   if(fastMA[1] < slowMA[1] && fastMA[0] > slowMA[0]) // Bullish crossover
     {
      OpenTrade(ORDER_TYPE_BUY);
     }
   else if(fastMA[1] > slowMA[1] && fastMA[0] < slowMA[0]) // Bearish crossover
     {
      OpenTrade(ORDER_TYPE_SELL);
     }
  }
//+------------------------------------------------------------------+
//| Function to open trades                                          |
//+------------------------------------------------------------------+
void OpenTrade(ENUM_ORDER_TYPE type)
  {
   double sl,tp,price;

   if(type == ORDER_TYPE_BUY)
     {
      price = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
      sl = price - StopLoss * _Point;
      tp = price + TakeProfit * _Point;
     }
   else
     {
      price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
      sl = price + StopLoss * _Point;
      tp = price - TakeProfit * _Point;
     }

   MqlTradeRequest request;
   MqlTradeResult  result;
   ZeroMemory(request);

   request.action   = TRADE_ACTION_DEAL;
   request.symbol   = _Symbol;
   request.volume   = Lots;
   request.type     = type;
   request.price    = price;
   request.sl       = sl;
   request.tp       = tp;
   request.deviation= 20;
   request.magic    = 12345;
   request.comment  = "MA Crossover EA";

   if(!OrderSend(request,result))
     {
      Print("OrderSend failed: ",result.retcode);
     }
   else
     {
      Print("Trade opened: ",EnumToString(type));
     }
  }
//+------------------------------------------------------------------+



